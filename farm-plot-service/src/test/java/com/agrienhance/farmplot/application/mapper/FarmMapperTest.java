package com.agrienhance.farmplot.application.mapper;

import com.agrienhance.farmplot.api.dto.farm.CreateFarmRequest;
import com.agrienhance.farmplot.api.dto.farm.FarmResponse;
import com.agrienhance.farmplot.api.dto.farm.UpdateFarmRequest;
import com.agrienhance.farmplot.api.dto.geojson.PointGeometryDto;
import com.agrienhance.farmplot.domain.entity.Farm;
import org.junit.jupiter.api.Test;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.Point;
import org.locationtech.jts.geom.PrecisionModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest; // To load Spring context and get mapper beans

import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat; // Using AssertJ for fluent assertions

// We specify classes for SpringBootTest to load only necessary components for this test,
// making it faster than loading the whole application context.
@SpringBootTest(classes = { FarmMapperImpl.class, GeometryMapper.class })
class FarmMapperTest {

    @Autowired
    private FarmMapper farmMapper; // The MapStruct-generated implementation will be injected

    private final GeometryFactory geometryFactory = new GeometryFactory(new PrecisionModel(), 4326);

    @Test
    void shouldMapCreateFarmRequestToFarm() {
        // Given
        PointGeometryDto pointDto = PointGeometryDto.builder()
                .type("Point")
                .coordinates(List.of(10.0, 20.0))
                .build();
        CreateFarmRequest request = CreateFarmRequest.builder()
                .farmName("Test Farm")
                .ownerReferenceId(UUID.randomUUID())
                .countryCode("NG")
                .region("Test Region")
                .generalLocationCoordinates(pointDto)
                .notes("Test notes")
                .tenantId(UUID.randomUUID())
                .build();

        // When
        Farm farm = farmMapper.createRequestToFarm(request);

        // Then
        assertThat(farm).isNotNull();
        assertThat(farm.getFarmName()).isEqualTo(request.getFarmName());
        assertThat(farm.getOwnerReferenceId()).isEqualTo(request.getOwnerReferenceId());
        assertThat(farm.getCountryCode()).isEqualTo(request.getCountryCode());
        assertThat(farm.getRegion()).isEqualTo(request.getRegion());
        assertThat(farm.getNotes()).isEqualTo(request.getNotes());
        assertThat(farm.getTenantId()).isEqualTo(request.getTenantId());

        assertThat(farm.getGeneralLocationCoordinates()).isNotNull();
        assertThat(farm.getGeneralLocationCoordinates().getX()).isEqualTo(10.0);
        assertThat(farm.getGeneralLocationCoordinates().getY()).isEqualTo(20.0);

        // Fields ignored by MapStruct in this mapping should be null or default
        assertThat(farm.getFarmIdentifier()).isNull(); // Generated by JPA/DB
        assertThat(farm.getCreatedAt()).isNull(); // Set by @PrePersist
        assertThat(farm.getUpdatedAt()).isNull(); // Set by @PrePersist
        assertThat(farm.getVersion()).isNull(); // Set by JPA
    }

    @Test
    void shouldMapFarmToFarmResponse() {
        // Given
        UUID farmId = UUID.randomUUID();
        Point point = geometryFactory.createPoint(new Coordinate(15.0, 25.0));
        OffsetDateTime now = OffsetDateTime.now();

        Farm farm = Farm.builder()
                .farmIdentifier(farmId)
                .farmName("Response Test Farm")
                .ownerReferenceId(UUID.randomUUID())
                .countryCode("KE")
                .region("Response Region")
                .generalLocationCoordinates(point)
                .notes("Response notes")
                .tenantId(UUID.randomUUID())
                .createdAt(now)
                .updatedAt(now)
                .version(1L)
                .build();

        // When
        FarmResponse response = farmMapper.farmToFarmResponse(farm);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.getFarmIdentifier()).isEqualTo(farm.getFarmIdentifier());
        assertThat(response.getFarmName()).isEqualTo(farm.getFarmName());
        assertThat(response.getOwnerReferenceId()).isEqualTo(farm.getOwnerReferenceId());
        assertThat(response.getCountryCode()).isEqualTo(farm.getCountryCode());
        // ... assert other fields ...
        assertThat(response.getGeneralLocationCoordinates()).isNotNull();
        assertThat(response.getGeneralLocationCoordinates().getCoordinates().get(0)).isEqualTo(15.0);
        assertThat(response.getGeneralLocationCoordinates().getCoordinates().get(1)).isEqualTo(25.0);
        assertThat(response.getCreatedAt()).isEqualTo(now);
        assertThat(response.getUpdatedAt()).isEqualTo(now);
        assertThat(response.getVersion()).isEqualTo(1L);
    }

    @Test
    void shouldUpdateFarmFromUpdateFarmRequest() {
        // Given
        Farm existingFarm = Farm.builder()
                .farmIdentifier(UUID.randomUUID())
                .farmName("Old Farm Name")
                .countryCode("TZ")
                .region("Old Region")
                .notes("Old notes")
                .generalLocationCoordinates(geometryFactory.createPoint(new Coordinate(1.0, 1.0)))
                .tenantId(UUID.randomUUID()) // This should not change
                .ownerReferenceId(UUID.randomUUID()) // This should not change from this DTO
                .build();

        PointGeometryDto newPointDto = PointGeometryDto.builder().type("Point").coordinates(List.of(2.0, 2.0)).build();
        UpdateFarmRequest request = UpdateFarmRequest.builder()
                .farmName("New Farm Name")
                .region("New Region") // Country code and notes are null in request
                .generalLocationCoordinates(newPointDto)
                .build();

        // When
        farmMapper.updateFarmFromRequest(request, existingFarm); // existingFarm is @MappingTarget

        // Then
        assertThat(existingFarm.getFarmName()).isEqualTo("New Farm Name");
        assertThat(existingFarm.getRegion()).isEqualTo("New Region");
        assertThat(existingFarm.getCountryCode()).isEqualTo("TZ"); // Should remain unchanged (null in request)
        assertThat(existingFarm.getNotes()).isEqualTo("Old notes"); // Should remain unchanged (null in request)
        assertThat(existingFarm.getGeneralLocationCoordinates().getX()).isEqualTo(2.0);
        assertThat(existingFarm.getGeneralLocationCoordinates().getY()).isEqualTo(2.0);
        // Assert that fields not in UpdateFarmRequest or ignored remain unchanged
        assertThat(existingFarm.getTenantId()).isNotNull();
        assertThat(existingFarm.getOwnerReferenceId()).isNotNull();
    }

    @Test
    void shouldHandleNullGeneralLocationCoordinatesInRequest() {
        // Given
        CreateFarmRequest request = CreateFarmRequest.builder()
                .farmName("Farm No Coords")
                .ownerReferenceId(UUID.randomUUID())
                .countryCode("UG")
                .tenantId(UUID.randomUUID())
                .generalLocationCoordinates(null) // Explicitly null
                .build();
        // When
        Farm farm = farmMapper.createRequestToFarm(request);
        // Then
        assertThat(farm.getGeneralLocationCoordinates()).isNull();
    }

    @Test
    void shouldHandleNullGeneralLocationCoordinatesInEntity() {
        // Given
        Farm farm = Farm.builder()
                .farmIdentifier(UUID.randomUUID())
                .farmName("Farm No Coords Entity")
                .generalLocationCoordinates(null) // Explicitly null
                .build();
        // When
        FarmResponse response = farmMapper.farmToFarmResponse(farm);
        // Then
        assertThat(response.getGeneralLocationCoordinates()).isNull();
    }
}